using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using Robust.Shared.IoC;
using Robust.Shared.Log;
using Robust.Shared.Reflection;

namespace Robust.Client.UserInterface;

public interface IXamlCompiledMethodProxyManager
{
    public void Initialize();
    public void ProxyMethodsFromAssembly(Assembly assembly);
    public void PopulateDynamic(Type t, object o);

    public void Populate<T>(T t);
}

public sealed class XamlCompiledMethodProxyManager : IXamlCompiledMethodProxyManager
{
    [Dependency] private IReflectionManager _reflectionManager = default!;
    private List<Assembly> _heldAssemblies = [];  // TODO: Weaker way to reference these?
    MethodProxyPool<IServiceProvider> _populate = new();

    public void Initialize()
    {
        InitializeFromNewAssemblies();
        _reflectionManager.OnAssemblyAdded += (_, args) =>
        {
            InitializeFromNewAssemblies();
        };
    }

    public void InitializeFromNewAssemblies()
    {
        foreach (var a in _reflectionManager.Assemblies)
        {
            if (!_heldAssemblies.Contains(a))
            {
                _heldAssemblies.Add(a);
                ProxyMethodsFromAssembly(a);
            }
        }
    }

    public void ProxyMethodsFromAssembly(Assembly assembly)
    {
        foreach (var t in assembly.GetTypes())
        {
            foreach (var m in t.GetMethods())
            {
                if (m.Name.StartsWith("Populate:"))
                {
                    _populate.Set(t, m);
                }
            }
        }
    }

    public void PopulateDynamic(Type t, object o)
    {
        _populate.CallDynamic(t, o);
    }

    public void Populate<T>(T t)
    {
        _populate.Call<T>(t);
    }
}

/// <summary>
/// A pool of implementations of Action{Extra, T} across various Ts.
///
/// This is the type of Populate as generated by Xamlx.
/// </summary>
public interface IMethodProxyPool<FirstArg>
{
    public void SetDynamic(Type t, MethodInfo m);
    public void CallDynamic(Type t, object o);

    public void Set<T>(MethodInfo m);
    public void Set<T>(Action<FirstArg, T> populate);
    public void Call<T>(T t);
}

public sealed class MethodProxyPool<FirstArg>: IMethodProxyPool<FirstArg>
{
    private Dictionary<Type, object> _implementations = new();

    // apologies for the reflection soup!
    private readonly static MethodInfo _setGeneric =
        typeof(MethodProxyPool<FirstArg>)
            .GetMethods()
            .First(m =>
                m.Name == "Set" &&
                m.IsGenericMethod &&
                m.GetParameters().Length == 1 &&
                m.GetParameters()[0].ParameterType == typeof(MethodInfo)
            );

    private readonly static MethodInfo _callGeneric =
        typeof(MethodProxyPool<FirstArg>)
            .GetMethods()
            .First(m =>
                m.Name == "Call" &&
                m.IsGenericMethod &&
                m.GetParameters().Length == 1
            );

    public void SetDynamic(Type t, MethodInfo m)
    {
        _setGeneric.MakeGenericMethod(t).Invoke(this, [m]);
    }

    public void CallDynamic(Type t, object o)
    {
        _callGeneric.MakeGenericMethod(t).Invoke(this, [o]);
    }

    public void Set<T>(MethodInfo m)
    {
        Set<T>((Action<FirstArg, T>) Delegate.CreateDelegate(typeof(Action<FirstArg, T>), m));
    }

    public void Set<T>(Action<FirstArg, T> populate)
    {
        _implementations[typeof(T)] = populate;
    }

    public void Call<T>(T t)
    {
        if (!_implementations.TryGetValue(typeof(T), out object? record))
        {
            throw new Exception($"no callback found for {typeof(T)} -- this is a bug in the Xaml subsystem");
        }

        if (record is not Action<FirstArg, T> impl)
        {
            throw new Exception(
                $"garbled callback found for {typeof(T)} -- this is a _big_ bug in the Xaml subsystem");
        }

        Logger.Debug("entering trapdoored code");
        impl(default!, t);
    }
}
